spring:
  main:
    allow-bean-definition-overriding: true
  config:
    import: optional:file:.env[.properties]
  application:
    name: STOCK-SERVICE
  datasource:
    url: jdbc:mysql://${SERVERS:db}:3306/Stock
    username: ${SPRING_DATASOURCE_USERNAME:root}
    password: ${DB_PASSWORD}
  jpa:
    hibernate:
      ddl-auto: update
    properties:
      hibernate:
        dialect: org.hibernate.dialect.MySQLDialect
        jdbc:
          batch_size: 50
  data:
    redis:
      host: ${REDIS_HOST}
      port: ${REDIS_PORT}
      time-to-live: 3600000
  kafka:
    bootstrap-servers: ${KAFKA_SERVERS:kafka}:${KAFKA_PORT:9092}
    consumer:
      group-id: ${spring.application.name}-group
      auto-offset-reset: earliest
      enable-auto-commit: false
    producer:
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
    listener:
      ack-mode: MANUAL_IMMEDIATE
    streams:
      application-id: ${spring.application.name}-streams
      properties:
        default.key.serde: org.apache.kafka.common.serialization.Serdes$StringSerde
        default.value.serde: org.springframework.kafka.support.serializer.JsonSerde
  cloud:
    openfeign:
      client:
        config:
          default:
            connectTimeout: 5000
            readTimeout: 5000
  web:
    resources:
      static-locations: classpath:/static/,file:/app/static/
  mvc:
    throw-exception-if-no-handler-found: true
  cache:
    type: redis
    redis:
      time-to-live: 600000  # 10 minutes
    cache-names:
      - stocks
      - stockPrices
      - latestStockPrices
      - stockPriceRanges
      - weeklyPrices
      - monthlyPrices
      - stocksByMarketType
      - stockSearch
      - topStocks
    caffeine:
      spec: maximumSize=500,expireAfterAccess=600s
  batch:
    job:
      enabled: false
    jdbc:
      initialize-schema: always

server:
  port: 8085

logging:
  level:
    org.springframework: INFO
    stock.stock_service: DEBUG
    org.apache.kafka: WARN
    org.springframework.data.redis: DEBUG

eureka:
  client:
    serviceUrl:
      defaultZone: ${EUREKA_SERVER_URL}
    fetch-registry: true
    register-with-eureka: true
  instance:
    preferIpAddress: true

feign:
  client:
    config:
      default:
        loggerLevel: basic

resilience4j:
  circuitbreaker:
    instances:
      stockService:
        registerHealthIndicator: true
        slidingWindowSize: 10
        permittedNumberOfCallsInHalfOpenState: 3
        slidingWindowType: COUNT_BASED
        minimumNumberOfCalls: 5
        waitDurationInOpenState: 5s
        failureRateThreshold: 50
        eventConsumerBufferSize: 10
  retry:
    instances:
      stockService:
        maxAttempts: 3
        waitDuration: 1s
        enableExponentialBackoff: true
        exponentialBackoffMultiplier: 2
        retryExceptions:
          - org.springframework.web.client.HttpServerErrorException
          - java.io.IOException

management:
  endpoints:
    web:
      exposure:
        include: "*"
  endpoint:
    health:
      show-details: always
  health:
    circuitbreakers:
      enabled: true

stock:
  batch:
    chunk-size: 100
    days-to-fetch: 1
  scheduler:
    daily:
      cron: "0 0 18 * * MON-FRI"
    init:
      cron: "0 0 1 * * ?"
    historical-days: 1825