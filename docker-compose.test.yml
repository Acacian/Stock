version: '3.8'

services:
  integration-test:
    build:
      context: .
      dockerfile: Dockerfile.test
    environment:
      - SPRING_PROFILES_ACTIVE=${MODE:-test}
      - SPRING_DATASOURCE_URL=jdbc:mysql://stock-db-1:3306/${DB_NAME:-Stock_Test}
      - SPRING_DATASOURCE_USERNAME=root
      - SPRING_DATASOURCE_PASSWORD=${DB_PASSWORD_VAR:-TEST_DB_PASSWORD}
    env_file:
      - .env
    depends_on:
      - db
      - user-service
      - newsfeed-service
      - social-service
    networks:
      - my-network
    command: ["./gradlew", "integrationTest", "--info"]

  db:
    image: mysql:8.0.39
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_PASSWORD_VAR:-TEST_DB_PASSWORD}
      MYSQL_DATABASE: ${DB_NAME:-Stock_Test}
    ports:
      - "3306:3306"
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - my-network

  redis:
    image: redis:6.2
    ports:
      - "6380:6379"
    networks:
      - my-network

  kafka:
    image: wurstmeister/kafka:2.13-2.8.1
    environment:
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:9093,OUTSIDE://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_LISTENERS: INSIDE://0.0.0.0:9093,OUTSIDE://0.0.0.0:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
    ports:
      - "9093:9093"
    depends_on:
      - zookeeper
    networks:
      - my-network

  zookeeper:
    image: zookeeper:3.7.0
    networks:
      - my-network

  user-service:
    build:
      context: .
      dockerfile: user_service/Dockerfile
    working_dir: /app
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
      kafka:
        condition: service_started
    networks:
      - my-network
    env_file:
      - .env
    command: ["java", "-jar", "-Dspring.profiles.active=${MODE:-test}", "app.jar"]

  newsfeed-service:
    build:
      context: .
      dockerfile: newsfeed_service/Dockerfile
    working_dir: /app
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
      kafka:
        condition: service_started
    networks:
      - my-network
    env_file:
      - .env
    command: ["java", "-jar", "-Dspring.profiles.active=${MODE:-test}", "app.jar"]

  social-service:
    build:
      context: .
      dockerfile: social_service/Dockerfile
    working_dir: /app
    depends_on:
      db:
        condition: service_healthy
      kafka:
        condition: service_started
    networks:
      - my-network
    env_file:
      - .env
    command: ["java", "-jar", "-Dspring.profiles.active=${MODE:-test}", "app.jar"]

networks:
  my-network:
    driver: bridge