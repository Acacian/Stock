spring:
  main:
    allow-bean-definition-overriding: true
  config:
    import: optional:file:.env[.properties]
  application:
    name: USER-SERVICE
  datasource:
    url: jdbc:mysql://${SERVERS:db}:3306/Stock
    username: ${SPRING_DATASOURCE_USERNAME:root}
    password: ${DB_PASSWORD}
  jpa:
    hibernate:
      ddl-auto: update
    properties:
      hibernate:
        dialect: org.hibernate.dialect.MySQLDialect
  data:
    redis:
      host: ${REDIS_HOST:redis}
      port: ${REDIS_PORT:6379}
  mail:
    host: smtp.gmail.com
    username: ${SENDING_EMAIL}
    port: 587
    password: ${EMAIL_PASSWORD}
    properties:
      mail:
        smtp:
          auth: true
          starttls:
            enable: true
  kafka:
    bootstrap-servers: ${KAFKA_SERVERS:kafka}:${KAFKA_PORT:9092}
    consumer:
      group-id: ${spring.application.name}-group
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      properties:
        spring.json.trusted.packages: stock.user_service.kafka
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
    listener:
      ack-mode: MANUAL_IMMEDIATE
  cloud:
    openfeign:
      client:
        config:
          default:
            connectTimeout: 5000
            readTimeout: 5000

server:
  port: 8082

logging:
  level:
    '[org.springframework]': INFO
    '[stock.user_service]': DEBUG
    'stock.user_service.client.NewsfeedServiceClient': DEBUG

app:
  domain: ${APP_DOMAIN}
  jwt:
    secret: ${JWT_SECRET:defaultSecretKey}
    expirationInMs: 3600000

eureka:
  client:
    serviceUrl:
      defaultZone: http://eureka-server:8761/eureka/
    fetch-registry: true
    register-with-eureka: true
  instance:
    preferIpAddress: true

feign:
  client:
    config:
      default:
        loggerLevel: basic

resilience4j:
  circuitbreaker:
    instances:
      newsfeedService:
        registerHealthIndicator: true
        slidingWindowSize: 10
        permittedNumberOfCallsInHalfOpenState: 3
        slidingWindowType: COUNT_BASED
        minimumNumberOfCalls: 5
        waitDurationInOpenState: 5s
        failureRateThreshold: 50
        eventConsumerBufferSize: 10
  retry:
    instances:
      newsfeedService:
        maxAttempts: 3
        waitDuration: 1s
        enableExponentialBackoff: true
        exponentialBackoffMultiplier: 2
        retryExceptions:
          - org.springframework.web.client.HttpServerErrorException
          - java.io.IOException