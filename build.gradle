plugins {
    id 'java'
    id 'org.springframework.boot' version '3.1.5' apply false
    id 'io.spring.dependency-management' version '1.1.3' apply false
}

ext {
    set('springCloudVersion', "2022.0.4")
    set('resilience4jVersion', "2.1.0")
    set('jwtVersion', "0.11.5")
}

allprojects {
    group = 'stock'
    version = '0.0.1-SNAPSHOT'

    repositories {
        mavenCentral()
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

    sourceCompatibility = '17'

    dependencyManagement {
        imports {
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
        }
    }

    dependencies {
        compileOnly 'org.projectlombok:lombok'
        annotationProcessor 'org.projectlombok:lombok'
        
        testImplementation 'org.springframework.boot:spring-boot-starter-test'
        testImplementation 'org.junit.jupiter:junit-jupiter-api'
        testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
    }

    // JWT 의존성을 사용하는 프로젝트들에 공통으로 적용
    if (project.name in ['user_service', 'api_gateway']) {
        dependencies {
            implementation "io.jsonwebtoken:jjwt-api:${jwtVersion}"
            runtimeOnly "io.jsonwebtoken:jjwt-impl:${jwtVersion}"
            runtimeOnly "io.jsonwebtoken:jjwt-jackson:${jwtVersion}"
        }
    }

    // Eureka Server를 제외한 모든 서브프로젝트에 적용
    if (project.name != 'eureka_server') {
        dependencies {
            implementation "io.github.resilience4j:resilience4j-spring-boot2:${resilience4jVersion}"
            implementation "io.github.resilience4j:resilience4j-all:${resilience4jVersion}"
            implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'
            implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'
        }
    }

    // User Service에만 적용되는 의존성
    if (project.name == 'user_service') {
        dependencies {
            implementation 'org.springframework.boot:spring-boot-starter-security'
            implementation 'org.springframework.boot:spring-boot-starter-mail'
            implementation 'com.fasterxml.uuid:java-uuid-generator:4.0.1'
            implementation 'com.github.f4b6a3:uuid-creator:5.1.0'
            testImplementation 'org.assertj:assertj-core:3.24.2'
            testImplementation 'org.springframework.security:spring-security-test'
        }
    }

    // Eureka Server에만 적용되는 의존성
    if (project.name == 'eureka_server') {
        dependencies {
            implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-server'
        }
    }

    // API Gateway에만 적용되는 의존성
    if (project.name == 'api_gateway') {
        dependencies {
            implementation 'org.springframework.cloud:spring-cloud-starter-gateway'
            implementation 'org.springframework.cloud:spring-cloud-starter-circuitbreaker-reactor-resilience4j'
            implementation 'org.springframework.boot:spring-boot-starter-actuator'
        }
    }

    // Eureka Server와 API Gateway를 제외한 모든 서브프로젝트에 적용
    if (!(project.name in ['eureka_server', 'api_gateway'])) {
        dependencies {
            implementation 'org.springframework.boot:spring-boot-starter-web'
            implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
            implementation 'org.springframework.kafka:spring-kafka'
            implementation 'com.mysql:mysql-connector-j'
            implementation 'org.springframework.boot:spring-boot-starter-data-redis'
            implementation 'redis.clients:jedis'
            
            testImplementation 'org.springframework.kafka:spring-kafka-test'
            testImplementation 'org.awaitility:awaitility:4.2.0'
            testImplementation 'org.mockito:mockito-core'
            testImplementation 'org.mockito:mockito-junit-jupiter'
            testImplementation 'org.testcontainers:junit-jupiter:1.17.6'
            testImplementation 'org.testcontainers:kafka:1.17.6'
        }
    }

    test {
        useJUnitPlatform()
        testLogging {
            events "passed", "skipped", "failed"
        }
    }

    task integrationTest(type: Test) {
        useJUnitPlatform()
        include '**/IntegrationTest*'
        systemProperty 'spring.profiles.active', 'test'
    }
}

task integrationTest(type: Test) {
    description = 'Runs integration tests.'
    group = 'verification'

    def allTestClassesDirs = project.subprojects.collect { it.sourceSets.test.output.classesDirs }.flatten()
    testClassesDirs = files(allTestClassesDirs)

    def allRuntimeClasspaths = project.subprojects.collect { it.sourceSets.test.runtimeClasspath }.flatten()
    classpath = files(allRuntimeClasspaths)

    useJUnitPlatform()
    include '**/IntegrationTest*'
    systemProperty 'spring.profiles.active', 'test'
}