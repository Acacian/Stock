services:
  jenkins:
    image: jenkins/jenkins:lts
    user: root
    ports:
      - 8080:8080
      - 50000:50000
    container_name: jenkins
    volumes:
      - jenkins_home:/var/jenkins_home
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - my-network
    environment:
      - DOCKER_HOST=unix:///var/run/docker.sock
    command: >
      bash -c "
      apt-get update && 
      apt-get -y install apt-transport-https ca-certificates curl gnupg2 software-properties-common && 
      curl -fsSL https://download.docker.com/linux/debian/gpg | apt-key add - && 
      add-apt-repository \"deb [arch=amd64] https://download.docker.com/linux/debian $$(lsb_release -cs) stable\" && 
      apt-get update && 
      apt-get -y install docker-ce-cli &&
      chown -R jenkins:jenkins /var/jenkins_home &&
      su jenkins -c \"/usr/local/bin/jenkins.sh\"
      "

  db:
    image: mysql:8.0.39
    container_name: db
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_PASSWORD}
      MYSQL_DATABASE: ${DB_NAME}
      MYSQL_LOG_CONSOLE: "true"
    ports:
      - "3306:3306"
    volumes:
      - mysql-data:/var/lib/mysql
      - ./erd.sql:/docker-entrypoint-initdb.d/erd.sql
    networks:
      - my-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 20s
      timeout: 10s
      retries: 10

  redis:
    image: redis:6.2
    container_name: redis
    ports:
      - "6379:6379"
    networks:
      - my-network

  kafka:
    image: wurstmeister/kafka:2.13-2.8.1
    container_name: kafka-server
    ports:
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:9093,OUTSIDE://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_LISTENERS: INSIDE://0.0.0.0:9093,OUTSIDE://0.0.0.0:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
    networks:
      - my-network
    depends_on:
      - zookeeper

  zookeeper:
    image: zookeeper:3.7.0
    container_name: zookeeper
    ports:
      - "2181:2181"
    networks:
      - my-network

  eureka-server:
    build:
      context: .
      dockerfile: eureka_server/Dockerfile
    container_name: eureka-server
    ports:
      - "8761:8761"
    networks:
      - my-network

  user-service:
    build:
      context: .
      dockerfile: user_service/Dockerfile
    container_name: user-service
    ports:
      - "8082:8082"
      - "3001:80"  
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
      kafka:
        condition: service_started
      eureka-server:
        condition: service_started
    env_file:
      - .env
    volumes:
      - user-uploads:/app/uploads/profile_images
    environment:
      - SPRING_PROFILES_ACTIVE=${MODE:-prod}
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka-server:8761/eureka/
    networks:
      - my-network

  newsfeed-service:
    build:
      context: .
      dockerfile: newsfeed_service/Dockerfile
    container_name: newsfeed-service
    ports:
      - "8083:8083"
      - "3002:80"  
    depends_on:
      db:
        condition: service_healthy
      kafka:
        condition: service_started
      eureka-server:
        condition: service_started
    env_file:
      - .env
    environment:
      - SPRING_PROFILES_ACTIVE=${MODE:-prod}
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka-server:8761/eureka/
    networks:
      - my-network

  social-service:
    build:
      context: .
      dockerfile: social_service/Dockerfile
    container_name: social-service
    ports:
      - "8084:8084"
      - "3003:80"  
    depends_on:
      db:
        condition: service_healthy
      kafka:
        condition: service_started
      eureka-server:
        condition: service_started
    env_file:
      - .env
    environment:
      - SPRING_PROFILES_ACTIVE=${MODE:-prod}
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka-server:8761/eureka/
    networks:
      - my-network

  stock-service:
    build:
      context: .
      dockerfile: stock_service/Dockerfile
    container_name: stock-service
    ports:
      - "8085:8085"
      - "3004:80"  
    depends_on:
      db:
        condition: service_healthy
      kafka:
        condition: service_started
      eureka-server:
        condition: service_started
    env_file:
      - .env
    environment:
      - SPRING_PROFILES_ACTIVE=${MODE:-prod}
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka-server:8761/eureka/
    networks:
      - my-network

  api-gateway:
    build:
      context: .
      dockerfile: api_gateway/Dockerfile
    container_name: api-gateway
    ports:
      - "8081:8081"
    depends_on:
      - eureka-server
      - user-service
      - newsfeed-service
      - social-service
      - stock-service
    environment:
      - SPRING_PROFILES_ACTIVE=${MODE:-prod}
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka-server:8761/eureka/
    networks:
      - my-network

volumes:
  mysql-data:
  jenkins_home:
  user-uploads:

networks:
  my-network:
    name: stock_my-network
    driver: bridge